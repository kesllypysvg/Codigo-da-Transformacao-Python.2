import requests
import json  # Importa a biblioteca para tratar erros de JSON

def obter_previsao_tempo_seguro(cidade, api_key):
    """
    Obt√©m a previs√£o do tempo com tratamento de erros robusto.
    """
    base_url = "http://api.openweathermap.org/data/2.5/weather?"
    url_completa = f"{base_url}appid={api_key}&q={cidade}&units=metric&lang=pt_br"
    
    try:
        # Tenta fazer a requisi√ß√£o e processar os dados
        resposta = requests.get(url_completa, timeout=10) # Adiciona um timeout de 10 segundos
        
        # Lan√ßa uma exce√ß√£o para erros HTTP, como 404 (N√£o Encontrado) ou 500 (Erro do Servidor)
        resposta.raise_for_status()
        
        # Converte a resposta JSON em um dicion√°rio Python
        dados = resposta.json()
        
        # Extrai os dados relevantes
        temperatura_atual = dados["main"]["temp"]
        sensacao_termica = dados["main"]["feels_like"]
        umidade = dados["main"]["humidity"]
        velocidade_vento = dados["wind"]["speed"]
        condicao_climatica = dados["weather"][0]["description"]
        
        # Exibe os dados de forma organizada
        print("-" * 30)
        print(f"Previs√£o do tempo para: {cidade.title()}")
        print("-" * 30)
        print(f"üå°Ô∏è  Temperatura atual: {temperatura_atual}¬∞C")
        print(f"üå°Ô∏è  Sensa√ß√£o t√©rmica: {sensacao_termica}¬∞C")
        print(f"‚òÅÔ∏è  Condi√ß√µes clim√°ticas: {condicao_climatica.capitalize()}")
        print(f"üíß  Umidade do ar: {umidade}%")
        print(f"üí®  Velocidade do vento: {velocidade_vento} m/s")
        print("-" * 30)
            
    except requests.exceptions.HTTPError as err_http:
        # Trata erros de requisi√ß√£o HTTP espec√≠ficos (ex: 404, 401)
        if resposta.status_code == 404:
            print(f"‚ùå Erro 404: Cidade '{cidade}' n√£o encontrada. Verifique a grafia.")
        elif resposta.status_code == 401:
            print(f"‚ùå Erro 401: Chave de API inv√°lida. Verifique sua API key.")
        else:
            print(f"‚ùå Erro HTTP inesperado: {err_http}")
            
    except requests.exceptions.ConnectionError as err_con:
        # Trata problemas de conex√£o de rede (sem internet, DNS, etc.)
        print(f"‚ùå Erro de conex√£o: Falha ao conectar √† internet ou ao servidor da API. {err_con}")
        
    except requests.exceptions.Timeout as err_timeout:
        # Trata caso a requisi√ß√£o demore demais para responder
        print(f"‚ùå Erro de tempo limite: A requisi√ß√£o demorou demais para responder. {err_timeout}")
        
    except json.JSONDecodeError:
        # Trata caso a resposta n√£o seja um JSON v√°lido
        print("‚ùå Erro de decodifica√ß√£o: A resposta da API n√£o √© um JSON v√°lido.")

    except KeyError as err_key:
        # Trata caso algum campo esperado (ex: 'temp') esteja faltando na resposta
        print(f"‚ùå Erro de dados: O campo '{err_key}' est√° ausente na resposta da API.")
        
    except Exception as err:
        # Trata qualquer outro erro inesperado
        print(f"‚ùå Ocorreu um erro inesperado: {err}")

# --- Substitua 'SUA_API_KEY' e 'SUA_CIDADE' pelas suas informa√ß√µes ---
api_key = "SUA_API_KEY"
cidade_desejada = "Tokyo"

# Chama a fun√ß√£o para obter a previs√£o do tempo com seguran√ßa
obter_previsao_tempo_seguro(cidade_desejada, api_key)
